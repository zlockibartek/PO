1675109724
waR3U4bTeM%3Ac988473cdf52509210cb8f058a8377f7-995c0059f2758ecafa71101197af6187
s:49592:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6Ijk5NWMwMDU5ZjI3NThlY2FmYTcxMTAxMTk3YWY2MTg3IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjA6IkVuZ2xpc2hJbmZsZWN0b3IucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTI6InZlbmRvci9zeW1mb255L3N0cmluZy9JbmZsZWN0b3IvRW5nbGlzaEluZmxlY3Rvci5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjE1NTU0OiI8P3BocAoKLyoKICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIFN5bWZvbnkgcGFja2FnZS4KICoKICogKGMpIEZhYmllbiBQb3RlbmNpZXIgPGZhYmllbkBzeW1mb255LmNvbT4KICoKICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0UKICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuCiAqLwoKbmFtZXNwYWNlIFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3I7CgpmaW5hbCBjbGFzcyBFbmdsaXNoSW5mbGVjdG9yIGltcGxlbWVudHMgSW5mbGVjdG9ySW50ZXJmYWNlCnsKICAgIC8qKgogICAgICogTWFwIEVuZ2xpc2ggcGx1cmFsIHRvIHNpbmd1bGFyIHN1ZmZpeGVzLgogICAgICoKICAgICAqIEBzZWUgaHR0cDovL2VuZ2xpc2gtem9uZS5jb20vc3BlbGxpbmcvcGx1cmFscy5odG1sCiAgICAgKi8KICAgIHByaXZhdGUgY29uc3QgUExVUkFMX01BUCA9IFsKICAgICAgICAvLyBGaXJzdCBlbnRyeTogcGx1cmFsIHN1ZmZpeCwgcmV2ZXJzZWQKICAgICAgICAvLyBTZWNvbmQgZW50cnk6IGxlbmd0aCBvZiBwbHVyYWwgc3VmZml4CiAgICAgICAgLy8gVGhpcmQgZW50cnk6IFdoZXRoZXIgdGhlIHN1ZmZpeCBtYXkgc3VjY2VlZCBhIHZvY2FsCiAgICAgICAgLy8gRm91cnRoIGVudHJ5OiBXaGV0aGVyIHRoZSBzdWZmaXggbWF5IHN1Y2NlZWQgYSBjb25zb25hbnQKICAgICAgICAvLyBGaWZ0aCBlbnRyeTogc2luZ3VsYXIgc3VmZml4LCBub3JtYWwKCiAgICAgICAgLy8gYmFjdGVyaWEgKGJhY3Rlcml1bSksIGNyaXRlcmlhIChjcml0ZXJpb24pLCBwaGVub21lbmEgKHBoZW5vbWVub24pCiAgICAgICAgWydhJywgMSwgdHJ1ZSwgdHJ1ZSwgWydvbicsICd1bSddXSwKCiAgICAgICAgLy8gbmVidWxhZSAobmVidWxhKQogICAgICAgIFsnZWEnLCAyLCB0cnVlLCB0cnVlLCAnYSddLAoKICAgICAgICAvLyBzZXJ2aWNlcyAoc2VydmljZSkKICAgICAgICBbJ3NlY2l2cmVzJywgOCwgdHJ1ZSwgdHJ1ZSwgJ3NlcnZpY2UnXSwKCiAgICAgICAgLy8gbWljZSAobW91c2UpLCBsaWNlIChsb3VzZSkKICAgICAgICBbJ2VjaScsIDMsIGZhbHNlLCB0cnVlLCAnb3VzZSddLAoKICAgICAgICAvLyBnZWVzZSAoZ29vc2UpCiAgICAgICAgWydlc2VlJywgNCwgZmFsc2UsIHRydWUsICdvb3NlJ10sCgogICAgICAgIC8vIGZ1bmdpIChmdW5ndXMpLCBhbHVtbmkgKGFsdW1udXMpLCBzeWxsYWJpIChzeWxsYWJ1cyksIHJhZGlpIChyYWRpdXMpCiAgICAgICAgWydpJywgMSwgdHJ1ZSwgdHJ1ZSwgJ3VzJ10sCgogICAgICAgIC8vIG1lbiAobWFuKSwgd29tZW4gKHdvbWFuKQogICAgICAgIFsnbmVtJywgMywgdHJ1ZSwgdHJ1ZSwgJ21hbiddLAoKICAgICAgICAvLyBjaGlsZHJlbiAoY2hpbGQpCiAgICAgICAgWyduZXJkbGloYycsIDgsIHRydWUsIHRydWUsICdjaGlsZCddLAoKICAgICAgICAvLyBveGVuIChveCkKICAgICAgICBbJ25leG8nLCA0LCBmYWxzZSwgZmFsc2UsICdveCddLAoKICAgICAgICAvLyBpbmRpY2VzIChpbmRleCksIGFwcGVuZGljZXMgKGFwcGVuZGl4KSwgcHJpY2VzIChwcmljZSkKICAgICAgICBbJ3NlY2knLCA0LCBmYWxzZSwgdHJ1ZSwgWydleCcsICdpeCcsICdpY2UnXV0sCgogICAgICAgIC8vIHNlbGZpZXMgKHNlbGZpZSkKICAgICAgICBbJ3NlaWZsZXMnLCA3LCB0cnVlLCB0cnVlLCAnc2VsZmllJ10sCgogICAgICAgIC8vIHpvbWJpZXMgKHpvbWJpZSkKICAgICAgICBbJ3NlaWJtb3onLCA3LCB0cnVlLCB0cnVlLCAnem9tYmllJ10sCgogICAgICAgIC8vIG1vdmllcyAobW92aWUpCiAgICAgICAgWydzZWl2b20nLCA2LCB0cnVlLCB0cnVlLCAnbW92aWUnXSwKCiAgICAgICAgLy8gY29uc3BlY3R1c2VzIChjb25zcGVjdHVzKSwgcHJvc3BlY3R1c2VzIChwcm9zcGVjdHVzKQogICAgICAgIFsnc2VzdXRjZXAnLCA4LCB0cnVlLCB0cnVlLCAncGVjdHVzJ10sCgogICAgICAgIC8vIGZlZXQgKGZvb3QpCiAgICAgICAgWyd0ZWVmJywgNCwgdHJ1ZSwgdHJ1ZSwgJ2Zvb3QnXSwKCiAgICAgICAgLy8gZ2Vlc2UgKGdvb3NlKQogICAgICAgIFsnZXNlZWcnLCA1LCB0cnVlLCB0cnVlLCAnZ29vc2UnXSwKCiAgICAgICAgLy8gdGVldGggKHRvb3RoKQogICAgICAgIFsnaHRlZXQnLCA1LCB0cnVlLCB0cnVlLCAndG9vdGgnXSwKCiAgICAgICAgLy8gbmV3cyAobmV3cykKICAgICAgICBbJ3N3ZW4nLCA0LCB0cnVlLCB0cnVlLCAnbmV3cyddLAoKICAgICAgICAvLyBzZXJpZXMgKHNlcmllcykKICAgICAgICBbJ3NlaXJlcycsIDYsIHRydWUsIHRydWUsICdzZXJpZXMnXSwKCiAgICAgICAgLy8gYmFiaWVzIChiYWJ5KQogICAgICAgIFsnc2VpJywgMywgZmFsc2UsIHRydWUsICd5J10sCgogICAgICAgIC8vIGFjY2Vzc2VzIChhY2Nlc3MpLCBhZGRyZXNzZXMgKGFkZHJlc3MpLCBraXNzZXMgKGtpc3MpCiAgICAgICAgWydzZXNzJywgNCwgdHJ1ZSwgZmFsc2UsICdzcyddLAoKICAgICAgICAvLyBhbmFseXNlcyAoYW5hbHlzaXMpLCBlbGxpcHNlcyAoZWxsaXBzaXMpLCBmdW5naSAoZnVuZ3VzKSwKICAgICAgICAvLyBuZXVyb3NlcyAobmV1cm9zaXMpLCB0aGVzZXMgKHRoZXNpcyksIGVtcGhhc2VzIChlbXBoYXNpcyksCiAgICAgICAgLy8gb2FzZXMgKG9hc2lzKSwgY3Jpc2VzIChjcmlzaXMpLCBob3VzZXMgKGhvdXNlKSwgYmFzZXMgKGJhc2UpLAogICAgICAgIC8vIGF0bGFzZXMgKGF0bGFzKQogICAgICAgIFsnc2VzJywgMywgdHJ1ZSwgdHJ1ZSwgWydzJywgJ3NlJywgJ3NpcyddXSwKCiAgICAgICAgLy8gb2JqZWN0aXZlcyAob2JqZWN0aXZlKSwgYWx0ZXJuYXRpdmUgKGFsdGVybmF0aXZlcykKICAgICAgICBbJ3Nldml0JywgNSwgdHJ1ZSwgdHJ1ZSwgJ3RpdmUnXSwKCiAgICAgICAgLy8gZHJpdmVzIChkcml2ZSkKICAgICAgICBbJ3NldmlyZCcsIDYsIGZhbHNlLCB0cnVlLCAnZHJpdmUnXSwKCiAgICAgICAgLy8gbGl2ZXMgKGxpZmUpLCB3aXZlcyAod2lmZSkKICAgICAgICBbJ3NldmknLCA0LCBmYWxzZSwgdHJ1ZSwgJ2lmZSddLAoKICAgICAgICAvLyBtb3ZlcyAobW92ZSkKICAgICAgICBbJ3Nldm9tJywgNSwgdHJ1ZSwgdHJ1ZSwgJ21vdmUnXSwKCiAgICAgICAgLy8gaG9vdmVzIChob29mKSwgZHdhcnZlcyAoZHdhcmYpLCBlbHZlcyAoZWxmKSwgbGVhdmVzIChsZWFmKSwgY2F2ZXMgKGNhdmUpLCBzdGF2ZXMgKHN0YWZmKQogICAgICAgIFsnc2V2JywgMywgdHJ1ZSwgdHJ1ZSwgWydmJywgJ3ZlJywgJ2ZmJ11dLAoKICAgICAgICAvLyBheGVzIChheGlzKSwgYXhlcyAoYXgpLCBheGVzIChheGUpCiAgICAgICAgWydzZXhhJywgNCwgZmFsc2UsIGZhbHNlLCBbJ2F4JywgJ2F4ZScsICdheGlzJ11dLAoKICAgICAgICAvLyBpbmRleGVzIChpbmRleCksIG1hdHJpeGVzIChtYXRyaXgpCiAgICAgICAgWydzZXgnLCAzLCB0cnVlLCBmYWxzZSwgJ3gnXSwKCiAgICAgICAgLy8gcXVpenplcyAocXVpeikKICAgICAgICBbJ3NlenonLCA0LCB0cnVlLCBmYWxzZSwgJ3onXSwKCiAgICAgICAgLy8gYnVyZWF1cyAoYnVyZWF1KQogICAgICAgIFsnc3VhZScsIDQsIGZhbHNlLCB0cnVlLCAnZWF1J10sCgogICAgICAgIC8vIGZlZXMgKGZlZSksIHRyZWVzICh0cmVlKSwgZW1wbG95ZWVzIChlbXBsb3llZSkKICAgICAgICBbJ3NlZScsIDMsIHRydWUsIHRydWUsICdlZSddLAoKICAgICAgICAvLyBlZGdlcyAoZWRnZSkKICAgICAgICBbJ3NlZ2QnLCA0LCB0cnVlLCB0cnVlLCAnZGdlJ10sCgogICAgICAgIC8vIHJvc2VzIChyb3NlKSwgZ2FyYWdlcyAoZ2FyYWdlKSwgY2Fzc2V0dGVzIChjYXNzZXR0ZSksCiAgICAgICAgLy8gd2FsdHplcyAod2FsdHopLCBoZXJvZXMgKGhlcm8pLCBidXNoZXMgKGJ1c2gpLCBhcmNoZXMgKGFyY2gpLAogICAgICAgIC8vIHNob2VzIChzaG9lKQogICAgICAgIFsnc2UnLCAyLCB0cnVlLCB0cnVlLCBbJycsICdlJ11dLAoKICAgICAgICAvLyB0YWdzICh0YWcpCiAgICAgICAgWydzJywgMSwgdHJ1ZSwgdHJ1ZSwgJyddLAoKICAgICAgICAvLyBjaGF0ZWF1eCAoY2hhdGVhdSkKICAgICAgICBbJ3h1YWUnLCA0LCBmYWxzZSwgdHJ1ZSwgJ2VhdSddLAoKICAgICAgICAvLyBwZW9wbGUgKHBlcnNvbikKICAgICAgICBbJ2VscG9lcCcsIDYsIHRydWUsIHRydWUsICdwZXJzb24nXSwKICAgIF07CgogICAgLyoqCiAgICAgKiBNYXAgRW5nbGlzaCBzaW5ndWxhciB0byBwbHVyYWwgc3VmZml4ZXMuCiAgICAgKgogICAgICogQHNlZSBodHRwOi8vZW5nbGlzaC16b25lLmNvbS9zcGVsbGluZy9wbHVyYWxzLmh0bWwKICAgICAqLwogICAgcHJpdmF0ZSBjb25zdCBTSU5HVUxBUl9NQVAgPSBbCiAgICAgICAgLy8gRmlyc3QgZW50cnk6IHNpbmd1bGFyIHN1ZmZpeCwgcmV2ZXJzZWQKICAgICAgICAvLyBTZWNvbmQgZW50cnk6IGxlbmd0aCBvZiBzaW5ndWxhciBzdWZmaXgKICAgICAgICAvLyBUaGlyZCBlbnRyeTogV2hldGhlciB0aGUgc3VmZml4IG1heSBzdWNjZWVkIGEgdm9jYWwKICAgICAgICAvLyBGb3VydGggZW50cnk6IFdoZXRoZXIgdGhlIHN1ZmZpeCBtYXkgc3VjY2VlZCBhIGNvbnNvbmFudAogICAgICAgIC8vIEZpZnRoIGVudHJ5OiBwbHVyYWwgc3VmZml4LCBub3JtYWwKCiAgICAgICAgLy8gY3JpdGVyaW9uIChjcml0ZXJpYSkKICAgICAgICBbJ2FpcmV0aXJjJywgOCwgZmFsc2UsIGZhbHNlLCAnY3JpdGVyaW9uJ10sCgogICAgICAgIC8vIG5lYnVsYWUgKG5lYnVsYSkKICAgICAgICBbJ2FsdWJlbicsIDYsIGZhbHNlLCBmYWxzZSwgJ25lYnVsYWUnXSwKCiAgICAgICAgLy8gY2hpbGRyZW4gKGNoaWxkKQogICAgICAgIFsnZGxpaGMnLCA1LCB0cnVlLCB0cnVlLCAnY2hpbGRyZW4nXSwKCiAgICAgICAgLy8gcHJpY2VzIChwcmljZSkKICAgICAgICBbJ2VjaScsIDMsIGZhbHNlLCB0cnVlLCAnaWNlcyddLAoKICAgICAgICAvLyBzZXJ2aWNlcyAoc2VydmljZSkKICAgICAgICBbJ2VjaXZyZXMnLCA3LCB0cnVlLCB0cnVlLCAnc2VydmljZXMnXSwKCiAgICAgICAgLy8gbGl2ZXMgKGxpZmUpLCB3aXZlcyAod2lmZSkKICAgICAgICBbJ2VmaScsIDMsIGZhbHNlLCB0cnVlLCAnaXZlcyddLAoKICAgICAgICAvLyBzZWxmaWVzIChzZWxmaWUpCiAgICAgICAgWydlaWZsZXMnLCA2LCB0cnVlLCB0cnVlLCAnc2VsZmllcyddLAoKICAgICAgICAvLyBtb3ZpZXMgKG1vdmllKQogICAgICAgIFsnZWl2b20nLCA1LCB0cnVlLCB0cnVlLCAnbW92aWVzJ10sCgogICAgICAgIC8vIGxpY2UgKGxvdXNlKQogICAgICAgIFsnZXN1b2wnLCA1LCBmYWxzZSwgdHJ1ZSwgJ2xpY2UnXSwKCiAgICAgICAgLy8gbWljZSAobW91c2UpCiAgICAgICAgWydlc3VvbScsIDUsIGZhbHNlLCB0cnVlLCAnbWljZSddLAoKICAgICAgICAvLyBnZWVzZSAoZ29vc2UpCiAgICAgICAgWydlc29vJywgNCwgZmFsc2UsIHRydWUsICdlZXNlJ10sCgogICAgICAgIC8vIGhvdXNlcyAoaG91c2UpLCBiYXNlcyAoYmFzZSkKICAgICAgICBbJ2VzJywgMiwgdHJ1ZSwgdHJ1ZSwgJ3NlcyddLAoKICAgICAgICAvLyBnZWVzZSAoZ29vc2UpCiAgICAgICAgWydlc29vZycsIDUsIHRydWUsIHRydWUsICdnZWVzZSddLAoKICAgICAgICAvLyBjYXZlcyAoY2F2ZSkKICAgICAgICBbJ2V2JywgMiwgdHJ1ZSwgdHJ1ZSwgJ3ZlcyddLAoKICAgICAgICAvLyBkcml2ZXMgKGRyaXZlKQogICAgICAgIFsnZXZpcmQnLCA1LCBmYWxzZSwgdHJ1ZSwgJ2RyaXZlcyddLAoKICAgICAgICAvLyBvYmplY3RpdmVzIChvYmplY3RpdmUpLCBhbHRlcm5hdGl2ZSAoYWx0ZXJuYXRpdmVzKQogICAgICAgIFsnZXZpdCcsIDQsIHRydWUsIHRydWUsICd0aXZlcyddLAoKICAgICAgICAvLyBtb3ZlcyAobW92ZSkKICAgICAgICBbJ2V2b20nLCA0LCB0cnVlLCB0cnVlLCAnbW92ZXMnXSwKCiAgICAgICAgLy8gc3RhdmVzIChzdGFmZikKICAgICAgICBbJ2ZmYXRzJywgNSwgdHJ1ZSwgdHJ1ZSwgJ3N0YXZlcyddLAoKICAgICAgICAvLyBob292ZXMgKGhvb2YpLCBkd2FydmVzIChkd2FyZiksIGVsdmVzIChlbGYpLCBsZWF2ZXMgKGxlYWYpCiAgICAgICAgWydmZicsIDIsIHRydWUsIHRydWUsICdmZnMnXSwKCiAgICAgICAgLy8gaG9vdmVzIChob29mKSwgZHdhcnZlcyAoZHdhcmYpLCBlbHZlcyAoZWxmKSwgbGVhdmVzIChsZWFmKQogICAgICAgIFsnZicsIDEsIHRydWUsIHRydWUsIFsnZnMnLCAndmVzJ11dLAoKICAgICAgICAvLyBhcmNoZXMgKGFyY2gpCiAgICAgICAgWydoYycsIDIsIHRydWUsIHRydWUsICdjaGVzJ10sCgogICAgICAgIC8vIGJ1c2hlcyAoYnVzaCkKICAgICAgICBbJ2hzJywgMiwgdHJ1ZSwgdHJ1ZSwgJ3NoZXMnXSwKCiAgICAgICAgLy8gdGVldGggKHRvb3RoKQogICAgICAgIFsnaHRvb3QnLCA1LCB0cnVlLCB0cnVlLCAndGVldGgnXSwKCiAgICAgICAgLy8gYmFjdGVyaWEgKGJhY3Rlcml1bSksIGNyaXRlcmlhIChjcml0ZXJpb24pLCBwaGVub21lbmEgKHBoZW5vbWVub24pCiAgICAgICAgWydtdScsIDIsIHRydWUsIHRydWUsICdhJ10sCgogICAgICAgIC8vIG1lbiAobWFuKSwgd29tZW4gKHdvbWFuKQogICAgICAgIFsnbmFtJywgMywgdHJ1ZSwgdHJ1ZSwgJ21lbiddLAoKICAgICAgICAvLyBwZW9wbGUgKHBlcnNvbikKICAgICAgICBbJ25vc3JlcCcsIDYsIHRydWUsIHRydWUsIFsncGVyc29ucycsICdwZW9wbGUnXV0sCgogICAgICAgIC8vIGJhY3RlcmlhIChiYWN0ZXJpdW0pLCBjcml0ZXJpYSAoY3JpdGVyaW9uKSwgcGhlbm9tZW5hIChwaGVub21lbm9uKQogICAgICAgIFsnbm9pJywgMywgdHJ1ZSwgdHJ1ZSwgJ2lvbnMnXSwKCiAgICAgICAgLy8gY291cG9uIChjb3Vwb25zKQogICAgICAgIFsnbm9wJywgMywgdHJ1ZSwgdHJ1ZSwgJ3BvbnMnXSwKCiAgICAgICAgLy8gc2Vhc29ucyAoc2Vhc29uKSwgdHJlYXNvbnMgKHRyZWFzb24pLCBwb2lzb25zIChwb2lzb24pLCBsZXNzb25zIChsZXNzb24pCiAgICAgICAgWydub3MnLCAzLCB0cnVlLCB0cnVlLCAnc29ucyddLAoKICAgICAgICAvLyBiYWN0ZXJpYSAoYmFjdGVyaXVtKSwgY3JpdGVyaWEgKGNyaXRlcmlvbiksIHBoZW5vbWVuYSAocGhlbm9tZW5vbikKICAgICAgICBbJ25vJywgMiwgdHJ1ZSwgdHJ1ZSwgJ2EnXSwKCiAgICAgICAgLy8gZWNob2VzIChlY2hvKQogICAgICAgIFsnb2hjZScsIDQsIHRydWUsIHRydWUsICdlY2hvZXMnXSwKCiAgICAgICAgLy8gaGVyb2VzIChoZXJvKQogICAgICAgIFsnb3JlaCcsIDQsIHRydWUsIHRydWUsICdoZXJvZXMnXSwKCiAgICAgICAgLy8gYXRsYXNlcyAoYXRsYXMpCiAgICAgICAgWydzYWx0YScsIDUsIHRydWUsIHRydWUsICdhdGxhc2VzJ10sCgogICAgICAgIC8vIGlyaXNlcyAoaXJpcykKICAgICAgICBbJ3NpcmknLCA0LCB0cnVlLCB0cnVlLCAnaXJpc2VzJ10sCgogICAgICAgIC8vIGFuYWx5c2VzIChhbmFseXNpcyksIGVsbGlwc2VzIChlbGxpcHNpcyksIG5ldXJvc2VzIChuZXVyb3NpcykKICAgICAgICAvLyB0aGVzZXMgKHRoZXNpcyksIGVtcGhhc2VzIChlbXBoYXNpcyksIG9hc2VzIChvYXNpcyksCiAgICAgICAgLy8gY3Jpc2VzIChjcmlzaXMpCiAgICAgICAgWydzaXMnLCAzLCB0cnVlLCB0cnVlLCAnc2VzJ10sCgogICAgICAgIC8vIGFjY2Vzc2VzIChhY2Nlc3MpLCBhZGRyZXNzZXMgKGFkZHJlc3MpLCBraXNzZXMgKGtpc3MpCiAgICAgICAgWydzcycsIDIsIHRydWUsIGZhbHNlLCAnc3NlcyddLAoKICAgICAgICAvLyBzeWxsYWJpIChzeWxsYWJ1cykKICAgICAgICBbJ3N1YmFsbHlzJywgOCwgdHJ1ZSwgdHJ1ZSwgJ3N5bGxhYmknXSwKCiAgICAgICAgLy8gYnVzZXMgKGJ1cykKICAgICAgICBbJ3N1YicsIDMsIHRydWUsIHRydWUsICdidXNlcyddLAoKICAgICAgICAvLyBjaXJjdXNlcyAoY2lyY3VzKQogICAgICAgIFsnc3VjJywgMywgdHJ1ZSwgdHJ1ZSwgJ2N1c2VzJ10sCgogICAgICAgIC8vIGNvbnNwZWN0dXNlcyAoY29uc3BlY3R1cyksIHByb3NwZWN0dXNlcyAocHJvc3BlY3R1cykKICAgICAgICBbJ3N1dGNlcCcsIDYsIHRydWUsIHRydWUsICdwZWN0dXNlcyddLAoKICAgICAgICAvLyBmdW5naSAoZnVuZ3VzKSwgYWx1bW5pIChhbHVtbnVzKSwgc3lsbGFiaSAoc3lsbGFidXMpLCByYWRpaSAocmFkaXVzKQogICAgICAgIFsnc3UnLCAyLCB0cnVlLCB0cnVlLCAnaSddLAoKICAgICAgICAvLyBuZXdzIChuZXdzKQogICAgICAgIFsnc3dlbicsIDQsIHRydWUsIHRydWUsICduZXdzJ10sCgogICAgICAgIC8vIGZlZXQgKGZvb3QpCiAgICAgICAgWyd0b29mJywgNCwgdHJ1ZSwgdHJ1ZSwgJ2ZlZXQnXSwKCiAgICAgICAgLy8gY2hhdGVhdXggKGNoYXRlYXUpLCBidXJlYXVzIChidXJlYXUpCiAgICAgICAgWyd1YWUnLCAzLCBmYWxzZSwgdHJ1ZSwgWydlYXVzJywgJ2VhdXgnXV0sCgogICAgICAgIC8vIG94ZW4gKG94KQogICAgICAgIFsneG8nLCAyLCBmYWxzZSwgZmFsc2UsICdveGVuJ10sCgogICAgICAgIC8vIGhvYXhlcyAoaG9heCkKICAgICAgICBbJ3hhb2gnLCA0LCB0cnVlLCBmYWxzZSwgJ2hvYXhlcyddLAoKICAgICAgICAvLyBpbmRpY2VzIChpbmRleCkKICAgICAgICBbJ3hlZG5pJywgNSwgZmFsc2UsIHRydWUsIFsnaW5kaWNpZXMnLCAnaW5kZXhlcyddXSwKCiAgICAgICAgLy8gYm94ZXMgKGJveCkKICAgICAgICBbJ3hvJywgMiwgZmFsc2UsIHRydWUsICdveGVzJ10sCgogICAgICAgIC8vIGluZGV4ZXMgKGluZGV4KSwgbWF0cml4ZXMgKG1hdHJpeCkKICAgICAgICBbJ3gnLCAxLCB0cnVlLCBmYWxzZSwgWydjaWVzJywgJ3hlcyddXSwKCiAgICAgICAgLy8gYXBwZW5kaWNlcyAoYXBwZW5kaXgpCiAgICAgICAgWyd4aScsIDIsIGZhbHNlLCB0cnVlLCAnaWNlcyddLAoKICAgICAgICAvLyBiYWJpZXMgKGJhYnkpCiAgICAgICAgWyd5JywgMSwgZmFsc2UsIHRydWUsICdpZXMnXSwKCiAgICAgICAgLy8gcXVpenplcyAocXVpeikKICAgICAgICBbJ3ppdXEnLCA0LCB0cnVlLCBmYWxzZSwgJ3F1aXp6ZXMnXSwKCiAgICAgICAgLy8gd2FsdHplcyAod2FsdHopCiAgICAgICAgWyd6JywgMSwgdHJ1ZSwgdHJ1ZSwgJ3plcyddLAogICAgXTsKCiAgICAvKioKICAgICAqIEEgbGlzdCBvZiB3b3JkcyB3aGljaCBzaG91bGQgbm90IGJlIGluZmxlY3RlZCwgcmV2ZXJzZWQuCiAgICAgKi8KICAgIHByaXZhdGUgY29uc3QgVU5JTkZMRUNURUQgPSBbCiAgICAgICAgJycsCgogICAgICAgIC8vIGRhdGEKICAgICAgICAnYXRhZCcsCgogICAgICAgIC8vIGRlZXIKICAgICAgICAncmVlZCcsCgogICAgICAgIC8vIGZlZWRiYWNrCiAgICAgICAgJ2tjYWJkZWVmJywKCiAgICAgICAgLy8gZmlzaAogICAgICAgICdoc2lmJywKCiAgICAgICAgLy8gaW5mbwogICAgICAgICdvZm5pJywKCiAgICAgICAgLy8gbW9vc2UKICAgICAgICAnZXNvb20nLAoKICAgICAgICAvLyBzZXJpZXMKICAgICAgICAnc2VpcmVzJywKCiAgICAgICAgLy8gc2hlZXAKICAgICAgICAncGVlaHMnLAoKICAgICAgICAvLyBzcGVjaWVzCiAgICAgICAgJ3NlaWNlcHMnLAogICAgXTsKCiAgICAvKioKICAgICAqIHtAaW5oZXJpdGRvY30KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNpbmd1bGFyaXplKHN0cmluZyAkcGx1cmFsKTogYXJyYXkKICAgIHsKICAgICAgICAkcGx1cmFsUmV2ID0gc3RycmV2KCRwbHVyYWwpOwogICAgICAgICRsb3dlclBsdXJhbFJldiA9IHN0cnRvbG93ZXIoJHBsdXJhbFJldik7CiAgICAgICAgJHBsdXJhbExlbmd0aCA9IFxzdHJsZW4oJGxvd2VyUGx1cmFsUmV2KTsKCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHdvcmQgaXMgb25lIHdoaWNoIGlzIG5vdCBpbmZsZWN0ZWQsIHJldHVybiBlYXJseSBpZiBzbwogICAgICAgIGlmIChcaW5fYXJyYXkoJGxvd2VyUGx1cmFsUmV2LCBzZWxmOjpVTklORkxFQ1RFRCwgdHJ1ZSkpIHsKICAgICAgICAgICAgcmV0dXJuIFskcGx1cmFsXTsKICAgICAgICB9CgogICAgICAgIC8vIFRoZSBvdXRlciBsb29wIGl0ZXJhdGVzIG92ZXIgdGhlIGVudHJpZXMgb2YgdGhlIHBsdXJhbCB0YWJsZQogICAgICAgIC8vIFRoZSBpbm5lciBsb29wICRqIGl0ZXJhdGVzIG92ZXIgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHBsdXJhbCBzdWZmaXgKICAgICAgICAvLyBpbiB0aGUgcGx1cmFsIHRhYmxlIHRvIGNvbXBhcmUgdGhlbSB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSBhY3R1YWwKICAgICAgICAvLyBnaXZlbiBwbHVyYWwgc3VmZml4CiAgICAgICAgZm9yZWFjaCAoc2VsZjo6UExVUkFMX01BUCBhcyAkbWFwKSB7CiAgICAgICAgICAgICRzdWZmaXggPSAkbWFwWzBdOwogICAgICAgICAgICAkc3VmZml4TGVuZ3RoID0gJG1hcFsxXTsKICAgICAgICAgICAgJGogPSAwOwoKICAgICAgICAgICAgLy8gQ29tcGFyZSBjaGFyYWN0ZXJzIGluIHRoZSBwbHVyYWwgdGFibGUgYW5kIG9mIHRoZSBzdWZmaXggb2YgdGhlCiAgICAgICAgICAgIC8vIGdpdmVuIHBsdXJhbCBvbmUgYnkgb25lCiAgICAgICAgICAgIHdoaWxlICgkc3VmZml4WyRqXSA9PT0gJGxvd2VyUGx1cmFsUmV2WyRqXSkgewogICAgICAgICAgICAgICAgLy8gTGV0ICRqIHBvaW50IHRvIHRoZSBuZXh0IGNoYXJhY3RlcgogICAgICAgICAgICAgICAgKyskajsKCiAgICAgICAgICAgICAgICAvLyBTdWNjZXNzZnVsbHkgY29tcGFyZWQgdGhlIGxhc3QgY2hhcmFjdGVyCiAgICAgICAgICAgICAgICAvLyBBZGQgYW4gZW50cnkgd2l0aCB0aGUgc2luZ3VsYXIgc3VmZml4IHRvIHRoZSBzaW5ndWxhciBhcnJheQogICAgICAgICAgICAgICAgaWYgKCRqID09PSAkc3VmZml4TGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSXMgdGhlcmUgYW55IGNoYXJhY3RlciBwcmVjZWRpbmcgdGhlIHN1ZmZpeCBpbiB0aGUgcGx1cmFsIHN0cmluZz8KICAgICAgICAgICAgICAgICAgICBpZiAoJGogPCAkcGx1cmFsTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRuZXh0SXNWb2NhbCA9IGZhbHNlICE9PSBzdHJwb3MoJ2FlaW91JywgJGxvd2VyUGx1cmFsUmV2WyRqXSk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRtYXBbMl0gJiYgJG5leHRJc1ZvY2FsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdWZmaXggbWF5IG5vdCBzdWNjZWVkIGEgdm9jYWwgYnV0IG5leHQgY2hhciBpcyBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISRtYXBbM10gJiYgISRuZXh0SXNWb2NhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VmZml4IG1heSBub3Qgc3VjY2VlZCBhIGNvbnNvbmFudCBidXQgbmV4dCBjaGFyIGlzIG9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRuZXdCYXNlID0gc3Vic3RyKCRwbHVyYWwsIDAsICRwbHVyYWxMZW5ndGggLSAkc3VmZml4TGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICAkbmV3U3VmZml4ID0gJG1hcFs0XTsKCiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZSBwbHVyYWwgc3VmZml4CiAgICAgICAgICAgICAgICAgICAgLy8gaXMgdXBwZXJjYXNlZC4gSWYgeWVzLCB1cHBlcmNhc2UgdGhlIGZpcnN0IGNoYXJhY3RlciBpbgogICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzaW5ndWxhciBzdWZmaXggdG9vCiAgICAgICAgICAgICAgICAgICAgJGZpcnN0VXBwZXIgPSBjdHlwZV91cHBlcigkcGx1cmFsUmV2WyRqIC0gMV0pOwoKICAgICAgICAgICAgICAgICAgICBpZiAoXGlzX2FycmF5KCRuZXdTdWZmaXgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzaW5ndWxhcnMgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRuZXdTdWZmaXggYXMgJG5ld1N1ZmZpeEVudHJ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2luZ3VsYXJzW10gPSAkbmV3QmFzZS4oJGZpcnN0VXBwZXIgPyB1Y2ZpcnN0KCRuZXdTdWZmaXhFbnRyeSkgOiAkbmV3U3VmZml4RW50cnkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNpbmd1bGFyczsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBbJG5ld0Jhc2UuKCRmaXJzdFVwcGVyID8gdWNmaXJzdCgkbmV3U3VmZml4KSA6ICRuZXdTdWZmaXgpXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBTdWZmaXggaXMgbG9uZ2VyIHRoYW4gd29yZAogICAgICAgICAgICAgICAgaWYgKCRqID09PSAkcGx1cmFsTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIEFzc3VtZSB0aGF0IHBsdXJhbCBhbmQgc2luZ3VsYXIgaXMgaWRlbnRpY2FsCiAgICAgICAgcmV0dXJuIFskcGx1cmFsXTsKICAgIH0KCiAgICAvKioKICAgICAqIHtAaW5oZXJpdGRvY30KICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHBsdXJhbGl6ZShzdHJpbmcgJHNpbmd1bGFyKTogYXJyYXkKICAgIHsKICAgICAgICAkc2luZ3VsYXJSZXYgPSBzdHJyZXYoJHNpbmd1bGFyKTsKICAgICAgICAkbG93ZXJTaW5ndWxhclJldiA9IHN0cnRvbG93ZXIoJHNpbmd1bGFyUmV2KTsKICAgICAgICAkc2luZ3VsYXJMZW5ndGggPSBcc3RybGVuKCRsb3dlclNpbmd1bGFyUmV2KTsKCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHdvcmQgaXMgb25lIHdoaWNoIGlzIG5vdCBpbmZsZWN0ZWQsIHJldHVybiBlYXJseSBpZiBzbwogICAgICAgIGlmIChcaW5fYXJyYXkoJGxvd2VyU2luZ3VsYXJSZXYsIHNlbGY6OlVOSU5GTEVDVEVELCB0cnVlKSkgewogICAgICAgICAgICByZXR1cm4gWyRzaW5ndWxhcl07CiAgICAgICAgfQoKICAgICAgICAvLyBUaGUgb3V0ZXIgbG9vcCBpdGVyYXRlcyBvdmVyIHRoZSBlbnRyaWVzIG9mIHRoZSBzaW5ndWxhciB0YWJsZQogICAgICAgIC8vIFRoZSBpbm5lciBsb29wICRqIGl0ZXJhdGVzIG92ZXIgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHNpbmd1bGFyIHN1ZmZpeAogICAgICAgIC8vIGluIHRoZSBzaW5ndWxhciB0YWJsZSB0byBjb21wYXJlIHRoZW0gd2l0aCB0aGUgY2hhcmFjdGVycyBvZiB0aGUgYWN0dWFsCiAgICAgICAgLy8gZ2l2ZW4gc2luZ3VsYXIgc3VmZml4CiAgICAgICAgZm9yZWFjaCAoc2VsZjo6U0lOR1VMQVJfTUFQIGFzICRtYXApIHsKICAgICAgICAgICAgJHN1ZmZpeCA9ICRtYXBbMF07CiAgICAgICAgICAgICRzdWZmaXhMZW5ndGggPSAkbWFwWzFdOwogICAgICAgICAgICAkaiA9IDA7CgogICAgICAgICAgICAvLyBDb21wYXJlIGNoYXJhY3RlcnMgaW4gdGhlIHNpbmd1bGFyIHRhYmxlIGFuZCBvZiB0aGUgc3VmZml4IG9mIHRoZQogICAgICAgICAgICAvLyBnaXZlbiBwbHVyYWwgb25lIGJ5IG9uZQoKICAgICAgICAgICAgd2hpbGUgKCRzdWZmaXhbJGpdID09PSAkbG93ZXJTaW5ndWxhclJldlskal0pIHsKICAgICAgICAgICAgICAgIC8vIExldCAkaiBwb2ludCB0byB0aGUgbmV4dCBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgICsrJGo7CgogICAgICAgICAgICAgICAgLy8gU3VjY2Vzc2Z1bGx5IGNvbXBhcmVkIHRoZSBsYXN0IGNoYXJhY3RlcgogICAgICAgICAgICAgICAgLy8gQWRkIGFuIGVudHJ5IHdpdGggdGhlIHBsdXJhbCBzdWZmaXggdG8gdGhlIHBsdXJhbCBhcnJheQogICAgICAgICAgICAgICAgaWYgKCRqID09PSAkc3VmZml4TGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSXMgdGhlcmUgYW55IGNoYXJhY3RlciBwcmVjZWRpbmcgdGhlIHN1ZmZpeCBpbiB0aGUgcGx1cmFsIHN0cmluZz8KICAgICAgICAgICAgICAgICAgICBpZiAoJGogPCAkc2luZ3VsYXJMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG5leHRJc1ZvY2FsID0gZmFsc2UgIT09IHN0cnBvcygnYWVpb3UnLCAkbG93ZXJTaW5ndWxhclJldlskal0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkbWFwWzJdICYmICRuZXh0SXNWb2NhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VmZml4IG1heSBub3Qgc3VjY2VlZCBhIHZvY2FsIGJ1dCBuZXh0IGNoYXIgaXMgb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkbWFwWzNdICYmICEkbmV4dElzVm9jYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1ZmZpeCBtYXkgbm90IHN1Y2NlZWQgYSBjb25zb25hbnQgYnV0IG5leHQgY2hhciBpcyBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkbmV3QmFzZSA9IHN1YnN0cigkc2luZ3VsYXIsIDAsICRzaW5ndWxhckxlbmd0aCAtICRzdWZmaXhMZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICRuZXdTdWZmaXggPSAkbWFwWzRdOwoKICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlIHNpbmd1bGFyIHN1ZmZpeAogICAgICAgICAgICAgICAgICAgIC8vIGlzIHVwcGVyY2FzZWQuIElmIHllcywgdXBwZXJjYXNlIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4KICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2luZ3VsYXIgc3VmZml4IHRvbwogICAgICAgICAgICAgICAgICAgICRmaXJzdFVwcGVyID0gY3R5cGVfdXBwZXIoJHNpbmd1bGFyUmV2WyRqIC0gMV0pOwoKICAgICAgICAgICAgICAgICAgICBpZiAoXGlzX2FycmF5KCRuZXdTdWZmaXgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwbHVyYWxzID0gW107CgogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkbmV3U3VmZml4IGFzICRuZXdTdWZmaXhFbnRyeSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBsdXJhbHNbXSA9ICRuZXdCYXNlLigkZmlyc3RVcHBlciA/IHVjZmlyc3QoJG5ld1N1ZmZpeEVudHJ5KSA6ICRuZXdTdWZmaXhFbnRyeSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcGx1cmFsczsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBbJG5ld0Jhc2UuKCRmaXJzdFVwcGVyID8gdWNmaXJzdCgkbmV3U3VmZml4KSA6ICRuZXdTdWZmaXgpXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBTdWZmaXggaXMgbG9uZ2VyIHRoYW4gd29yZAogICAgICAgICAgICAgICAgaWYgKCRqID09PSAkc2luZ3VsYXJMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gQXNzdW1lIHRoYXQgcGx1cmFsIGlzIHNpbmd1bGFyIHdpdGggYSB0cmFpbGluZyBgc2AKICAgICAgICByZXR1cm4gWyRzaW5ndWxhci4ncyddOwogICAgfQp9CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6MzU6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MzU6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6OToiSW5mbGVjdG9yIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjE6e3M6NTI6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3IiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxMjp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTI6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3IiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiRW5nbGlzaEluZmxlY3RvciI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBkb2NCbG9jayI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZmluYWwiO2I6MTtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcGFyZW50IjtOO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBpbXBsZW1lbnRzIjthOjE6e3M6NTQ6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEluZmxlY3RvckludGVyZmFjZSI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjU0OiJcU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvclxJbmZsZWN0b3JJbnRlcmZhY2UiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxODoiSW5mbGVjdG9ySW50ZXJmYWNlIjt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBjb25zdGFudHMiO2E6Mzp7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6UExVUkFMX01BUCI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudCI6Nzp7czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NDoiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6UExVUkFMX01BUCI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEwOiJQTFVSQUxfTUFQIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjQwOiJNYXAgRW5nbGlzaCBwbHVyYWwgdG8gc2luZ3VsYXIgc3VmZml4ZXMuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQyOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xTZWUiOjM6e3M6NzoiACoAbmFtZSI7czozOiJzZWUiO3M6OToiACoAcmVmZXJzIjtPOjUyOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xSZWZlcmVuY2VcVXJsIjoxOntzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmVmZXJlbmNlXFVybAB1cmkiO3M6NDU6Imh0dHA6Ly9lbmdsaXNoLXpvbmUuY29tL3NwZWxsaW5nL3BsdXJhbHMuaHRtbCI7fXM6MTQ6IgAqAGRlc2NyaXB0aW9uIjtOO319czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czozNDoiU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvciI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AHZhbHVlIjtzOjMyODE6IlsKICAgIC8vIEZpcnN0IGVudHJ5OiBwbHVyYWwgc3VmZml4LCByZXZlcnNlZAogICAgLy8gU2Vjb25kIGVudHJ5OiBsZW5ndGggb2YgcGx1cmFsIHN1ZmZpeAogICAgLy8gVGhpcmQgZW50cnk6IFdoZXRoZXIgdGhlIHN1ZmZpeCBtYXkgc3VjY2VlZCBhIHZvY2FsCiAgICAvLyBGb3VydGggZW50cnk6IFdoZXRoZXIgdGhlIHN1ZmZpeCBtYXkgc3VjY2VlZCBhIGNvbnNvbmFudAogICAgLy8gRmlmdGggZW50cnk6IHNpbmd1bGFyIHN1ZmZpeCwgbm9ybWFsCiAgICAvLyBiYWN0ZXJpYSAoYmFjdGVyaXVtKSwgY3JpdGVyaWEgKGNyaXRlcmlvbiksIHBoZW5vbWVuYSAocGhlbm9tZW5vbikKICAgIFsnYScsIDEsIHRydWUsIHRydWUsIFsnb24nLCAndW0nXV0sCiAgICAvLyBuZWJ1bGFlIChuZWJ1bGEpCiAgICBbJ2VhJywgMiwgdHJ1ZSwgdHJ1ZSwgJ2EnXSwKICAgIC8vIHNlcnZpY2VzIChzZXJ2aWNlKQogICAgWydzZWNpdnJlcycsIDgsIHRydWUsIHRydWUsICdzZXJ2aWNlJ10sCiAgICAvLyBtaWNlIChtb3VzZSksIGxpY2UgKGxvdXNlKQogICAgWydlY2knLCAzLCBmYWxzZSwgdHJ1ZSwgJ291c2UnXSwKICAgIC8vIGdlZXNlIChnb29zZSkKICAgIFsnZXNlZScsIDQsIGZhbHNlLCB0cnVlLCAnb29zZSddLAogICAgLy8gZnVuZ2kgKGZ1bmd1cyksIGFsdW1uaSAoYWx1bW51cyksIHN5bGxhYmkgKHN5bGxhYnVzKSwgcmFkaWkgKHJhZGl1cykKICAgIFsnaScsIDEsIHRydWUsIHRydWUsICd1cyddLAogICAgLy8gbWVuIChtYW4pLCB3b21lbiAod29tYW4pCiAgICBbJ25lbScsIDMsIHRydWUsIHRydWUsICdtYW4nXSwKICAgIC8vIGNoaWxkcmVuIChjaGlsZCkKICAgIFsnbmVyZGxpaGMnLCA4LCB0cnVlLCB0cnVlLCAnY2hpbGQnXSwKICAgIC8vIG94ZW4gKG94KQogICAgWyduZXhvJywgNCwgZmFsc2UsIGZhbHNlLCAnb3gnXSwKICAgIC8vIGluZGljZXMgKGluZGV4KSwgYXBwZW5kaWNlcyAoYXBwZW5kaXgpLCBwcmljZXMgKHByaWNlKQogICAgWydzZWNpJywgNCwgZmFsc2UsIHRydWUsIFsnZXgnLCAnaXgnLCAnaWNlJ11dLAogICAgLy8gc2VsZmllcyAoc2VsZmllKQogICAgWydzZWlmbGVzJywgNywgdHJ1ZSwgdHJ1ZSwgJ3NlbGZpZSddLAogICAgLy8gem9tYmllcyAoem9tYmllKQogICAgWydzZWlibW96JywgNywgdHJ1ZSwgdHJ1ZSwgJ3pvbWJpZSddLAogICAgLy8gbW92aWVzIChtb3ZpZSkKICAgIFsnc2Vpdm9tJywgNiwgdHJ1ZSwgdHJ1ZSwgJ21vdmllJ10sCiAgICAvLyBjb25zcGVjdHVzZXMgKGNvbnNwZWN0dXMpLCBwcm9zcGVjdHVzZXMgKHByb3NwZWN0dXMpCiAgICBbJ3Nlc3V0Y2VwJywgOCwgdHJ1ZSwgdHJ1ZSwgJ3BlY3R1cyddLAogICAgLy8gZmVldCAoZm9vdCkKICAgIFsndGVlZicsIDQsIHRydWUsIHRydWUsICdmb290J10sCiAgICAvLyBnZWVzZSAoZ29vc2UpCiAgICBbJ2VzZWVnJywgNSwgdHJ1ZSwgdHJ1ZSwgJ2dvb3NlJ10sCiAgICAvLyB0ZWV0aCAodG9vdGgpCiAgICBbJ2h0ZWV0JywgNSwgdHJ1ZSwgdHJ1ZSwgJ3Rvb3RoJ10sCiAgICAvLyBuZXdzIChuZXdzKQogICAgWydzd2VuJywgNCwgdHJ1ZSwgdHJ1ZSwgJ25ld3MnXSwKICAgIC8vIHNlcmllcyAoc2VyaWVzKQogICAgWydzZWlyZXMnLCA2LCB0cnVlLCB0cnVlLCAnc2VyaWVzJ10sCiAgICAvLyBiYWJpZXMgKGJhYnkpCiAgICBbJ3NlaScsIDMsIGZhbHNlLCB0cnVlLCAneSddLAogICAgLy8gYWNjZXNzZXMgKGFjY2VzcyksIGFkZHJlc3NlcyAoYWRkcmVzcyksIGtpc3NlcyAoa2lzcykKICAgIFsnc2VzcycsIDQsIHRydWUsIGZhbHNlLCAnc3MnXSwKICAgIC8vIGFuYWx5c2VzIChhbmFseXNpcyksIGVsbGlwc2VzIChlbGxpcHNpcyksIGZ1bmdpIChmdW5ndXMpLAogICAgLy8gbmV1cm9zZXMgKG5ldXJvc2lzKSwgdGhlc2VzICh0aGVzaXMpLCBlbXBoYXNlcyAoZW1waGFzaXMpLAogICAgLy8gb2FzZXMgKG9hc2lzKSwgY3Jpc2VzIChjcmlzaXMpLCBob3VzZXMgKGhvdXNlKSwgYmFzZXMgKGJhc2UpLAogICAgLy8gYXRsYXNlcyAoYXRsYXMpCiAgICBbJ3NlcycsIDMsIHRydWUsIHRydWUsIFsncycsICdzZScsICdzaXMnXV0sCiAgICAvLyBvYmplY3RpdmVzIChvYmplY3RpdmUpLCBhbHRlcm5hdGl2ZSAoYWx0ZXJuYXRpdmVzKQogICAgWydzZXZpdCcsIDUsIHRydWUsIHRydWUsICd0aXZlJ10sCiAgICAvLyBkcml2ZXMgKGRyaXZlKQogICAgWydzZXZpcmQnLCA2LCBmYWxzZSwgdHJ1ZSwgJ2RyaXZlJ10sCiAgICAvLyBsaXZlcyAobGlmZSksIHdpdmVzICh3aWZlKQogICAgWydzZXZpJywgNCwgZmFsc2UsIHRydWUsICdpZmUnXSwKICAgIC8vIG1vdmVzIChtb3ZlKQogICAgWydzZXZvbScsIDUsIHRydWUsIHRydWUsICdtb3ZlJ10sCiAgICAvLyBob292ZXMgKGhvb2YpLCBkd2FydmVzIChkd2FyZiksIGVsdmVzIChlbGYpLCBsZWF2ZXMgKGxlYWYpLCBjYXZlcyAoY2F2ZSksIHN0YXZlcyAoc3RhZmYpCiAgICBbJ3NldicsIDMsIHRydWUsIHRydWUsIFsnZicsICd2ZScsICdmZiddXSwKICAgIC8vIGF4ZXMgKGF4aXMpLCBheGVzIChheCksIGF4ZXMgKGF4ZSkKICAgIFsnc2V4YScsIDQsIGZhbHNlLCBmYWxzZSwgWydheCcsICdheGUnLCAnYXhpcyddXSwKICAgIC8vIGluZGV4ZXMgKGluZGV4KSwgbWF0cml4ZXMgKG1hdHJpeCkKICAgIFsnc2V4JywgMywgdHJ1ZSwgZmFsc2UsICd4J10sCiAgICAvLyBxdWl6emVzIChxdWl6KQogICAgWydzZXp6JywgNCwgdHJ1ZSwgZmFsc2UsICd6J10sCiAgICAvLyBidXJlYXVzIChidXJlYXUpCiAgICBbJ3N1YWUnLCA0LCBmYWxzZSwgdHJ1ZSwgJ2VhdSddLAogICAgLy8gZmVlcyAoZmVlKSwgdHJlZXMgKHRyZWUpLCBlbXBsb3llZXMgKGVtcGxveWVlKQogICAgWydzZWUnLCAzLCB0cnVlLCB0cnVlLCAnZWUnXSwKICAgIC8vIGVkZ2VzIChlZGdlKQogICAgWydzZWdkJywgNCwgdHJ1ZSwgdHJ1ZSwgJ2RnZSddLAogICAgLy8gcm9zZXMgKHJvc2UpLCBnYXJhZ2VzIChnYXJhZ2UpLCBjYXNzZXR0ZXMgKGNhc3NldHRlKSwKICAgIC8vIHdhbHR6ZXMgKHdhbHR6KSwgaGVyb2VzIChoZXJvKSwgYnVzaGVzIChidXNoKSwgYXJjaGVzIChhcmNoKSwKICAgIC8vIHNob2VzIChzaG9lKQogICAgWydzZScsIDIsIHRydWUsIHRydWUsIFsnJywgJ2UnXV0sCiAgICAvLyB0YWdzICh0YWcpCiAgICBbJ3MnLCAxLCB0cnVlLCB0cnVlLCAnJ10sCiAgICAvLyBjaGF0ZWF1eCAoY2hhdGVhdSkKICAgIFsneHVhZScsIDQsIGZhbHNlLCB0cnVlLCAnZWF1J10sCiAgICAvLyBwZW9wbGUgKHBlcnNvbikKICAgIFsnZWxwb2VwJywgNiwgdHJ1ZSwgdHJ1ZSwgJ3BlcnNvbiddLApdIjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGZpbmFsIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAbWV0YWRhdGEiO2E6MDp7fX1zOjY2OiJcU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvclxFbmdsaXNoSW5mbGVjdG9yOjpTSU5HVUxBUl9NQVAiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQiOjc6e3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjY6IlxTeW1mb255XENvbXBvbmVudFxTdHJpbmdcSW5mbGVjdG9yXEVuZ2xpc2hJbmZsZWN0b3I6OlNJTkdVTEFSX01BUCI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEyOiJTSU5HVUxBUl9NQVAiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDA6Ik1hcCBFbmdsaXNoIHNpbmd1bGFyIHRvIHBsdXJhbCBzdWZmaXhlcy4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDI6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFNlZSI6Mzp7czo3OiIAKgBuYW1lIjtzOjM6InNlZSI7czo5OiIAKgByZWZlcnMiO086NTI6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJlZmVyZW5jZVxVcmwiOjE6e3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xSZWZlcmVuY2VcVXJsAHVyaSI7czo0NToiaHR0cDovL2VuZ2xpc2gtem9uZS5jb20vc3BlbGxpbmcvcGx1cmFscy5odG1sIjt9czoxNDoiACoAZGVzY3JpcHRpb24iO047fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6NDM7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudAB2YWx1ZSI7czo0MTY0OiJbCiAgICAvLyBGaXJzdCBlbnRyeTogc2luZ3VsYXIgc3VmZml4LCByZXZlcnNlZAogICAgLy8gU2Vjb25kIGVudHJ5OiBsZW5ndGggb2Ygc2luZ3VsYXIgc3VmZml4CiAgICAvLyBUaGlyZCBlbnRyeTogV2hldGhlciB0aGUgc3VmZml4IG1heSBzdWNjZWVkIGEgdm9jYWwKICAgIC8vIEZvdXJ0aCBlbnRyeTogV2hldGhlciB0aGUgc3VmZml4IG1heSBzdWNjZWVkIGEgY29uc29uYW50CiAgICAvLyBGaWZ0aCBlbnRyeTogcGx1cmFsIHN1ZmZpeCwgbm9ybWFsCiAgICAvLyBjcml0ZXJpb24gKGNyaXRlcmlhKQogICAgWydhaXJldGlyYycsIDgsIGZhbHNlLCBmYWxzZSwgJ2NyaXRlcmlvbiddLAogICAgLy8gbmVidWxhZSAobmVidWxhKQogICAgWydhbHViZW4nLCA2LCBmYWxzZSwgZmFsc2UsICduZWJ1bGFlJ10sCiAgICAvLyBjaGlsZHJlbiAoY2hpbGQpCiAgICBbJ2RsaWhjJywgNSwgdHJ1ZSwgdHJ1ZSwgJ2NoaWxkcmVuJ10sCiAgICAvLyBwcmljZXMgKHByaWNlKQogICAgWydlY2knLCAzLCBmYWxzZSwgdHJ1ZSwgJ2ljZXMnXSwKICAgIC8vIHNlcnZpY2VzIChzZXJ2aWNlKQogICAgWydlY2l2cmVzJywgNywgdHJ1ZSwgdHJ1ZSwgJ3NlcnZpY2VzJ10sCiAgICAvLyBsaXZlcyAobGlmZSksIHdpdmVzICh3aWZlKQogICAgWydlZmknLCAzLCBmYWxzZSwgdHJ1ZSwgJ2l2ZXMnXSwKICAgIC8vIHNlbGZpZXMgKHNlbGZpZSkKICAgIFsnZWlmbGVzJywgNiwgdHJ1ZSwgdHJ1ZSwgJ3NlbGZpZXMnXSwKICAgIC8vIG1vdmllcyAobW92aWUpCiAgICBbJ2Vpdm9tJywgNSwgdHJ1ZSwgdHJ1ZSwgJ21vdmllcyddLAogICAgLy8gbGljZSAobG91c2UpCiAgICBbJ2VzdW9sJywgNSwgZmFsc2UsIHRydWUsICdsaWNlJ10sCiAgICAvLyBtaWNlIChtb3VzZSkKICAgIFsnZXN1b20nLCA1LCBmYWxzZSwgdHJ1ZSwgJ21pY2UnXSwKICAgIC8vIGdlZXNlIChnb29zZSkKICAgIFsnZXNvbycsIDQsIGZhbHNlLCB0cnVlLCAnZWVzZSddLAogICAgLy8gaG91c2VzIChob3VzZSksIGJhc2VzIChiYXNlKQogICAgWydlcycsIDIsIHRydWUsIHRydWUsICdzZXMnXSwKICAgIC8vIGdlZXNlIChnb29zZSkKICAgIFsnZXNvb2cnLCA1LCB0cnVlLCB0cnVlLCAnZ2Vlc2UnXSwKICAgIC8vIGNhdmVzIChjYXZlKQogICAgWydldicsIDIsIHRydWUsIHRydWUsICd2ZXMnXSwKICAgIC8vIGRyaXZlcyAoZHJpdmUpCiAgICBbJ2V2aXJkJywgNSwgZmFsc2UsIHRydWUsICdkcml2ZXMnXSwKICAgIC8vIG9iamVjdGl2ZXMgKG9iamVjdGl2ZSksIGFsdGVybmF0aXZlIChhbHRlcm5hdGl2ZXMpCiAgICBbJ2V2aXQnLCA0LCB0cnVlLCB0cnVlLCAndGl2ZXMnXSwKICAgIC8vIG1vdmVzIChtb3ZlKQogICAgWydldm9tJywgNCwgdHJ1ZSwgdHJ1ZSwgJ21vdmVzJ10sCiAgICAvLyBzdGF2ZXMgKHN0YWZmKQogICAgWydmZmF0cycsIDUsIHRydWUsIHRydWUsICdzdGF2ZXMnXSwKICAgIC8vIGhvb3ZlcyAoaG9vZiksIGR3YXJ2ZXMgKGR3YXJmKSwgZWx2ZXMgKGVsZiksIGxlYXZlcyAobGVhZikKICAgIFsnZmYnLCAyLCB0cnVlLCB0cnVlLCAnZmZzJ10sCiAgICAvLyBob292ZXMgKGhvb2YpLCBkd2FydmVzIChkd2FyZiksIGVsdmVzIChlbGYpLCBsZWF2ZXMgKGxlYWYpCiAgICBbJ2YnLCAxLCB0cnVlLCB0cnVlLCBbJ2ZzJywgJ3ZlcyddXSwKICAgIC8vIGFyY2hlcyAoYXJjaCkKICAgIFsnaGMnLCAyLCB0cnVlLCB0cnVlLCAnY2hlcyddLAogICAgLy8gYnVzaGVzIChidXNoKQogICAgWydocycsIDIsIHRydWUsIHRydWUsICdzaGVzJ10sCiAgICAvLyB0ZWV0aCAodG9vdGgpCiAgICBbJ2h0b290JywgNSwgdHJ1ZSwgdHJ1ZSwgJ3RlZXRoJ10sCiAgICAvLyBiYWN0ZXJpYSAoYmFjdGVyaXVtKSwgY3JpdGVyaWEgKGNyaXRlcmlvbiksIHBoZW5vbWVuYSAocGhlbm9tZW5vbikKICAgIFsnbXUnLCAyLCB0cnVlLCB0cnVlLCAnYSddLAogICAgLy8gbWVuIChtYW4pLCB3b21lbiAod29tYW4pCiAgICBbJ25hbScsIDMsIHRydWUsIHRydWUsICdtZW4nXSwKICAgIC8vIHBlb3BsZSAocGVyc29uKQogICAgWydub3NyZXAnLCA2LCB0cnVlLCB0cnVlLCBbJ3BlcnNvbnMnLCAncGVvcGxlJ11dLAogICAgLy8gYmFjdGVyaWEgKGJhY3Rlcml1bSksIGNyaXRlcmlhIChjcml0ZXJpb24pLCBwaGVub21lbmEgKHBoZW5vbWVub24pCiAgICBbJ25vaScsIDMsIHRydWUsIHRydWUsICdpb25zJ10sCiAgICAvLyBjb3Vwb24gKGNvdXBvbnMpCiAgICBbJ25vcCcsIDMsIHRydWUsIHRydWUsICdwb25zJ10sCiAgICAvLyBzZWFzb25zIChzZWFzb24pLCB0cmVhc29ucyAodHJlYXNvbiksIHBvaXNvbnMgKHBvaXNvbiksIGxlc3NvbnMgKGxlc3NvbikKICAgIFsnbm9zJywgMywgdHJ1ZSwgdHJ1ZSwgJ3NvbnMnXSwKICAgIC8vIGJhY3RlcmlhIChiYWN0ZXJpdW0pLCBjcml0ZXJpYSAoY3JpdGVyaW9uKSwgcGhlbm9tZW5hIChwaGVub21lbm9uKQogICAgWydubycsIDIsIHRydWUsIHRydWUsICdhJ10sCiAgICAvLyBlY2hvZXMgKGVjaG8pCiAgICBbJ29oY2UnLCA0LCB0cnVlLCB0cnVlLCAnZWNob2VzJ10sCiAgICAvLyBoZXJvZXMgKGhlcm8pCiAgICBbJ29yZWgnLCA0LCB0cnVlLCB0cnVlLCAnaGVyb2VzJ10sCiAgICAvLyBhdGxhc2VzIChhdGxhcykKICAgIFsnc2FsdGEnLCA1LCB0cnVlLCB0cnVlLCAnYXRsYXNlcyddLAogICAgLy8gaXJpc2VzIChpcmlzKQogICAgWydzaXJpJywgNCwgdHJ1ZSwgdHJ1ZSwgJ2lyaXNlcyddLAogICAgLy8gYW5hbHlzZXMgKGFuYWx5c2lzKSwgZWxsaXBzZXMgKGVsbGlwc2lzKSwgbmV1cm9zZXMgKG5ldXJvc2lzKQogICAgLy8gdGhlc2VzICh0aGVzaXMpLCBlbXBoYXNlcyAoZW1waGFzaXMpLCBvYXNlcyAob2FzaXMpLAogICAgLy8gY3Jpc2VzIChjcmlzaXMpCiAgICBbJ3NpcycsIDMsIHRydWUsIHRydWUsICdzZXMnXSwKICAgIC8vIGFjY2Vzc2VzIChhY2Nlc3MpLCBhZGRyZXNzZXMgKGFkZHJlc3MpLCBraXNzZXMgKGtpc3MpCiAgICBbJ3NzJywgMiwgdHJ1ZSwgZmFsc2UsICdzc2VzJ10sCiAgICAvLyBzeWxsYWJpIChzeWxsYWJ1cykKICAgIFsnc3ViYWxseXMnLCA4LCB0cnVlLCB0cnVlLCAnc3lsbGFiaSddLAogICAgLy8gYnVzZXMgKGJ1cykKICAgIFsnc3ViJywgMywgdHJ1ZSwgdHJ1ZSwgJ2J1c2VzJ10sCiAgICAvLyBjaXJjdXNlcyAoY2lyY3VzKQogICAgWydzdWMnLCAzLCB0cnVlLCB0cnVlLCAnY3VzZXMnXSwKICAgIC8vIGNvbnNwZWN0dXNlcyAoY29uc3BlY3R1cyksIHByb3NwZWN0dXNlcyAocHJvc3BlY3R1cykKICAgIFsnc3V0Y2VwJywgNiwgdHJ1ZSwgdHJ1ZSwgJ3BlY3R1c2VzJ10sCiAgICAvLyBmdW5naSAoZnVuZ3VzKSwgYWx1bW5pIChhbHVtbnVzKSwgc3lsbGFiaSAoc3lsbGFidXMpLCByYWRpaSAocmFkaXVzKQogICAgWydzdScsIDIsIHRydWUsIHRydWUsICdpJ10sCiAgICAvLyBuZXdzIChuZXdzKQogICAgWydzd2VuJywgNCwgdHJ1ZSwgdHJ1ZSwgJ25ld3MnXSwKICAgIC8vIGZlZXQgKGZvb3QpCiAgICBbJ3Rvb2YnLCA0LCB0cnVlLCB0cnVlLCAnZmVldCddLAogICAgLy8gY2hhdGVhdXggKGNoYXRlYXUpLCBidXJlYXVzIChidXJlYXUpCiAgICBbJ3VhZScsIDMsIGZhbHNlLCB0cnVlLCBbJ2VhdXMnLCAnZWF1eCddXSwKICAgIC8vIG94ZW4gKG94KQogICAgWyd4bycsIDIsIGZhbHNlLCBmYWxzZSwgJ294ZW4nXSwKICAgIC8vIGhvYXhlcyAoaG9heCkKICAgIFsneGFvaCcsIDQsIHRydWUsIGZhbHNlLCAnaG9heGVzJ10sCiAgICAvLyBpbmRpY2VzIChpbmRleCkKICAgIFsneGVkbmknLCA1LCBmYWxzZSwgdHJ1ZSwgWydpbmRpY2llcycsICdpbmRleGVzJ11dLAogICAgLy8gYm94ZXMgKGJveCkKICAgIFsneG8nLCAyLCBmYWxzZSwgdHJ1ZSwgJ294ZXMnXSwKICAgIC8vIGluZGV4ZXMgKGluZGV4KSwgbWF0cml4ZXMgKG1hdHJpeCkKICAgIFsneCcsIDEsIHRydWUsIGZhbHNlLCBbJ2NpZXMnLCAneGVzJ11dLAogICAgLy8gYXBwZW5kaWNlcyAoYXBwZW5kaXgpCiAgICBbJ3hpJywgMiwgZmFsc2UsIHRydWUsICdpY2VzJ10sCiAgICAvLyBiYWJpZXMgKGJhYnkpCiAgICBbJ3knLCAxLCBmYWxzZSwgdHJ1ZSwgJ2llcyddLAogICAgLy8gcXVpenplcyAocXVpeikKICAgIFsneml1cScsIDQsIHRydWUsIGZhbHNlLCAncXVpenplcyddLAogICAgLy8gd2FsdHplcyAod2FsdHopCiAgICBbJ3onLCAxLCB0cnVlLCB0cnVlLCAnemVzJ10sCl0iO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxNTA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGZpbmFsIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAbWV0YWRhdGEiO2E6MDp7fX1zOjY1OiJcU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvclxFbmdsaXNoSW5mbGVjdG9yOjpVTklORkxFQ1RFRCI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudCI6Nzp7czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NToiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6VU5JTkZMRUNURUQiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiVU5JTkZMRUNURUQiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NTY6IkEgbGlzdCBvZiB3b3JkcyB3aGljaCBzaG91bGQgbm90IGJlIGluZmxlY3RlZCwgcmV2ZXJzZWQuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6NDM7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudAB2YWx1ZSI7czoyNDk6IlsKICAgICcnLAogICAgLy8gZGF0YQogICAgJ2F0YWQnLAogICAgLy8gZGVlcgogICAgJ3JlZWQnLAogICAgLy8gZmVlZGJhY2sKICAgICdrY2FiZGVlZicsCiAgICAvLyBmaXNoCiAgICAnaHNpZicsCiAgICAvLyBpbmZvCiAgICAnb2ZuaScsCiAgICAvLyBtb29zZQogICAgJ2Vzb29tJywKICAgIC8vIHNlcmllcwogICAgJ3NlaXJlcycsCiAgICAvLyBzaGVlcAogICAgJ3BlZWhzJywKICAgIC8vIHNwZWNpZXMKICAgICdzZWljZXBzJywKXSI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjMyMjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZmluYWwiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABtZXRhZGF0YSI7YTowOnt9fX1zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGhvZHMiO2E6Mjp7czo2NzoiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6c2luZ3VsYXJpemUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEwOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjEzOiJ7QGluaGVyaXRkb2N9IjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6NDM7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NzoiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6c2luZ3VsYXJpemUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJzaW5ndWxhcml6ZSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJwbHVyYWwiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MzU2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjY1OiJcU3ltZm9ueVxDb21wb25lbnRcU3RyaW5nXEluZmxlY3RvclxFbmdsaXNoSW5mbGVjdG9yOjpwbHVyYWxpemUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEwOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjEzOiJ7QGluaGVyaXRkb2N9IjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6NDM7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NToiXFN5bWZvbnlcQ29tcG9uZW50XFN0cmluZ1xJbmZsZWN0b3JcRW5nbGlzaEluZmxlY3Rvcjo6cGx1cmFsaXplKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo5OiJwbHVyYWxpemUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoic2luZ3VsYXIiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NDM1O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGFkYXRhIjthOjA6e319fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";